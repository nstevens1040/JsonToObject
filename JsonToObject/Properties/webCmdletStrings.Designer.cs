//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JsonToObject.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class webCmdletStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal webCmdletStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("JsonToObject.Properties.webCmdletStrings", typeof(webCmdletStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to the path &apos;{0}&apos; is denied..
        /// </summary>
        internal static string AccessDenied {
            get {
                return ResourceManager.GetString("AccessDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet cannot run because the following conflicting parameters are specified: Body and InFile. Specify either Body or Infile, then retry.  .
        /// </summary>
        internal static string BodyConflict {
            get {
                return ResourceManager.GetString("BodyConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to However, the &apos;Json.Net&apos; module could not be loaded. For more information, run &apos;Import-Module Json.Net&apos;..
        /// </summary>
        internal static string CouldNotAutoImportJsonNetModule {
            get {
                return ResourceManager.GetString("CouldNotAutoImportJsonNetModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet cannot run because the following conflicting parameters are specified: Credential and UseDefaultCredentials. Specify either Credential or UseDefaultCredentials, then retry..
        /// </summary>
        internal static string CredentialConflict {
            get {
                return ResourceManager.GetString("CredentialConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path &apos;{0}&apos; resolves to a directory. Specify a path including a file name, and then retry the command..
        /// </summary>
        internal static string DirecotryPathSpecified {
            get {
                return ResourceManager.GetString("DirecotryPathSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert the JSON string because a dictionary that was converted from the string contains the duplicated keys &apos;{0}&apos; and &apos;{1}&apos;..
        /// </summary>
        internal static string DuplicateKeysInJsonString {
            get {
                return ResourceManager.GetString("DuplicateKeysInJsonString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ConvertTo-Json and ConvertFrom-Json cmdlets require the installation of the .NET Client Profile, sometimes called the .NET extended profile..
        /// </summary>
        internal static string ExtendedProfileRequired {
            get {
                return ResourceManager.GetString("ExtendedProfileRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer&apos;s first-launch configuration is not complete. Specify the UseBasicParsing parameter and try again. .
        /// </summary>
        internal static string IEDomNotSupported {
            get {
                return ResourceManager.GetString("IEDomNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensure &apos;Json.Net.psd1&apos; and &apos;Newtonsoft.Json.dll&apos; are available in a versioned subdirectory of &apos;{0}&apos;..
        /// </summary>
        internal static string JsonNetModuleFilesRequired {
            get {
                return ResourceManager.GetString("JsonNetModuleFilesRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ConvertTo-Json and ConvertFrom-Json cmdlets require the &apos;Json.Net&apos; module. {0}.
        /// </summary>
        internal static string JsonNetModuleRequired {
            get {
                return ResourceManager.GetString("JsonNetModuleRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The converted JSON string is in bad format..
        /// </summary>
        internal static string JsonStringInBadFormat {
            get {
                return ResourceManager.GetString("JsonStringInBadFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum redirection count has been exceeded. To increase the number of redirections allowed, supply a higher value to the -MaximumRedirection parameter..
        /// </summary>
        internal static string MaximumRedirectionCountExceeded {
            get {
                return ResourceManager.GetString("MaximumRedirectionCountExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path &apos;{0}&apos; can be resolved to multiple paths..
        /// </summary>
        internal static string MultiplePathsResolved {
            get {
                return ResourceManager.GetString("MultiplePathsResolved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; is not supported for serialization or deserialization of a dictionary. Keys must be strings..
        /// </summary>
        internal static string NonStringKeyInDictionary {
            get {
                return ResourceManager.GetString("NonStringKeyInDictionary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path &apos;{0}&apos; cannot be resolved to a file..
        /// </summary>
        internal static string NoPathResolved {
            get {
                return ResourceManager.GetString("NoPathResolved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path &apos;{0}&apos; is not a file system path. Please specify the path to a file in the file system..
        /// </summary>
        internal static string NotFilesystemPath {
            get {
                return ResourceManager.GetString("NotFilesystemPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet cannot run because the following parameter is missing: OutFile. Provide a valid OutFile parameter value when using the PassThru parameter, then retry..
        /// </summary>
        internal static string OutFileMissing {
            get {
                return ResourceManager.GetString("OutFileMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet cannot run because the following conflicting parameters are specified: ProxyCredential and ProxyUseDefaultCredentials. Specify either ProxyCredential or ProxyUseDefaultCredentials, then retry..
        /// </summary>
        internal static string ProxyCredentialConflict {
            get {
                return ResourceManager.GetString("ProxyCredentialConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet cannot run because the following parameter is missing: Proxy. Provide a valid proxy URI for the Proxy parameter when using the ProxyCredential or UseDefaultProxyCredentials parameters, then retry..
        /// </summary>
        internal static string ProxyUriNotSupplied {
            get {
                return ResourceManager.GetString("ProxyUriNotSupplied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet cannot run because the &apos;Json.Net&apos; module cannot be loaded. Import the module manually or set the $PSModuleAutoLoadingPreference variable to enable module auto loading. For more information, see &apos;get-help about_Preference_Variables&apos;..
        /// </summary>
        internal static string PSModuleAutoloadingPreferenceNotEnable {
            get {
                return ResourceManager.GetString("PSModuleAutoloadingPreferenceNotEnable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum depth allowed for serialization is {0}..
        /// </summary>
        internal static string ReachedMaximumDepthAllowed {
            get {
                return ResourceManager.GetString("ReachedMaximumDepthAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading web response completed. (Number of bytes read: {0}).
        /// </summary>
        internal static string ReadResponseComplete {
            get {
                return ResourceManager.GetString("ReadResponseComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading web response.
        /// </summary>
        internal static string ReadResponseProgressActivity {
            get {
                return ResourceManager.GetString("ReadResponseProgressActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading response stream... (Number of bytes read: {0}).
        /// </summary>
        internal static string ReadResponseProgressStatus {
            get {
                return ResourceManager.GetString("ReadResponseProgressStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation has timed out..
        /// </summary>
        internal static string RequestTimeout {
            get {
                return ResourceManager.GetString("RequestTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet cannot run because the following conflicting parameters are specified: Session and SessionVariable. Specify either Session or SessionVariable, then retry..
        /// </summary>
        internal static string SessionConflict {
            get {
                return ResourceManager.GetString("SessionConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to retrieve certificates because the thumbprint is not valid. Verify the thumbprint and retry. .
        /// </summary>
        internal static string ThumbprintNotFound {
            get {
                return ResourceManager.GetString("ThumbprintNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing web request completed. (Number of bytes remaining: {0}).
        /// </summary>
        internal static string WriteRequestComplete {
            get {
                return ResourceManager.GetString("WriteRequestComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing web request.
        /// </summary>
        internal static string WriteRequestProgressActivity {
            get {
                return ResourceManager.GetString("WriteRequestProgressActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing request stream... (Number of bytes written: {0}).
        /// </summary>
        internal static string WriteRequestProgressStatus {
            get {
                return ResourceManager.GetString("WriteRequestProgressStatus", resourceCulture);
            }
        }
    }
}
